# -*- coding: utf-8 -*-
"""Untitled10.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1qNv3xlBPUE3fGcumJIbsRnirmur87_Oy
"""

import pandas as pd
import numpy as np
import pickle
from sklearn.ensemble import GradientBoostingRegressor
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import MinMaxScaler, OneHotEncoder

train_data = pd.read_csv('train_dataset.csv')
train_data_salaries = pd.read_csv('train_salaries.csv')
test_data = pd.read_csv('test_dataset.csv')

train_data = pd.merge(train_data,train_data_salaries, on = 'jobId')

train_data = train_data[train_data['salary']>30]

train_data.drop(['jobId', 'companyId'], axis=1, inplace=True)

# Separate features and target
X = train_data.drop('salary', axis=1)
y = train_data['salary']

# One-hot encode categorical features
categorical_cols = X.select_dtypes(include='object').columns.tolist()
encoder = OneHotEncoder(handle_unknown='ignore', sparse_output=False)
X_encoded = encoder.fit_transform(X[categorical_cols])
X_encoded_df = pd.DataFrame(X_encoded, columns=encoder.get_feature_names_out(categorical_cols))

numerical_cols = ['yearsExperience', 'milesFromMetropolis']
scaler = MinMaxScaler()
X_scaled = pd.DataFrame(scaler.fit_transform(X[numerical_cols]), columns=numerical_cols)

X_final = pd.concat([X_encoded_df.reset_index(drop=True), X_scaled.reset_index(drop=True)], axis=1)

X_train, X_test, y_train, y_test = train_test_split(X_final, y, test_size=0.2, random_state=42)

model = GradientBoostingRegressor()
model.fit(X_train, y_train)

pickle.dump(model, open('attrition_model.pkl', 'wb'))
pickle.dump(encoder, open('encoder.pkl', 'wb'))
pickle.dump(scaler, open('scaler.pkl', 'wb'))

categorical_cols = ['jobType', 'degree', 'major', 'industry']
numerical_cols = ['yearsExperience', 'milesFromMetropolis']

sample = pd.DataFrame([{
    'jobType': 'CFO',
    'degree': 'Masters',
    'major': 'Chemistry',
    'industry': 'Web',
    'yearsExperience': 5,
    'milesFromMetropolis': 9
}])

sample_encoded = encoder.transform(sample[categorical_cols])
sample_scaled = scaler.transform(sample[numerical_cols])

# Combine
sample_final = np.concatenate((sample_encoded, sample_scaled), axis=1)

loaded_model = pickle.load(open('attrition_model.pkl', 'rb'))
predicted_salary = loaded_model.predict(sample_final)
print(f"Predicted salary: ${round(predicted_salary[0], 3)}k")

